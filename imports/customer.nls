; NetLogo Customer NLS file
; Customer is a turtle
breed [customers customer]
turtles-own [
  basket
]

; Spawns customer
to spawn-customer [num_customers]
  create-customers num_customers [
    set basket []
    move-to one-of patches with [pcolor = green ]
    set color grey
    set shape "person"
    set size 2
  ]
  
end

; Move customer
to move-customer
    ; Placeholder movement, just goes to the exit for now
    let exit-patch one-of patches with [pcolor = red]
    face exit-patch
    fd 1
end

to add-basket [grocery_item]
  
end

to-report generate-bucket-list
  let num-items random 10
  let cur-items 0
  let bucket []
  
  loop [
    let item-id (random (length data - 1)) + 1  ; Subtracts the header from length and adds one to skip header.
    let bucket-item-data grab-item-data item-id
    
    ; Format of list is [itemid, amount]
    let bucket-item []
    set bucket-item lput (item 0 bucket-item-data) bucket-item  ; Puts ID to bucket-item
    set bucket-item lput 1 bucket-item  ; Quantity becomes 1 by default since new item.
    
    print "Current bucket: "
    print bucket
    print "Item: "
    print bucket-item
    
    let found false  ; For skipping last few lines in case dupe is found
    
    if ((length bucket) >= 1)
    [
      let fcounter 0  ; For indexing
      
      while [fcounter < length bucket]
      [
        let dupe (item fcounter bucket)
        if (item 0 bucket-item = item 0 dupe) 
          [
            let quantity (item 1 dupe) + 1
            let new-item []
            set new-item lput (item 0 dupe) new-item  ; id
            set new-item lput quantity new-item       ; quantity
            
            set bucket (replace-item fcounter bucket new-item)
            
            set fcounter (length bucket)  ; Force stop

            set cur-items (cur-items + 1)  ; Increment number of items
            if cur-items >= num-items [ report bucket ]  ; Report bucket if reached max items
            
            set found true
    
          ]  ; Found duplicate
        set fcounter (fcounter + 1)  ; Increment index
      ]
    ]
    
    if (found = false) 
    [
      set bucket lput bucket-item bucket  ; Adds to bucket
      set cur-items (cur-items + 1)  ; Increment number of items
      if cur-items >= num-items [ report bucket ]  ; Report bucket if reached max items
    ]
    
  ]

end
